#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


// Layers
#define BASE 0
#define WIN 1
#define NUM 2
#define MEDIA 3
#define CSGO 4
#define STTG 5

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
        //zmk,matrix_transform = &five_column_transform;
    };
};

// Combination Behaviors
// -----------------------------------------------------------------------------
// |  0  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  10 |  11 |
// |  12 |  13 |  14 |  15 |  16 |  17 |   |  18 |  19 |  20 |  21 |  22 |  23 |
// |  24 |  25 |  26 |  27 |  28 |  29 |   |  30 |  31 |  32 |  33 |  34 |  35 |
//                   |  36 |  37 |  38 |   |  39 |  40 |  41 |

/ {
    combos {
        compatible = "zmk,combos";

        combo_Escape {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
                     };
                     
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp CAPS>;
                     };
                     
        combo_ToggleNUMright {
            timeout-ms = <50>;
            key-positions = <33 34>;
            bindings = <&mo 2>;
                     };
                       
        combo_SYM {
            timeout-ms = <50>;
            key-positions = <31 32 33 34>;
            bindings = <&tog 3>;
                       };
                       
        combo_WIN {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&tog 1>;
                       };
                      
        combo_CSGO {
            timeout-ms = <50>;
            key-positions = <14 27>;
            bindings = <&tog 4>;
                       };
                       
        combo_STTG {
            timeout-ms = <50>;
            key-positions = <13 14 15 16>;
            bindings = <&tog 5>;
                       };
           };
    };


// Hold-tap behaviors
&mt {
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    quick-tap-ms = <200>;
};

//Keymap
/{
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";

            // -----------------------------------------------------------------------------------------
            // | DEL |Q (1)|W (2)|E (3)|R (4)|T (5)|   |Y (6)|U (7)|I (8)|O (9)|P (0)|  -  |
            // | SUP |  A  |S(UP)|  D  |  F  |G (C)|   |H (F)|  J  |  K  |  L  |  ;  |' (ยง)|
            // |LSHFT|Z(LT)|X(DN)|C(RT)|  V  |B (V)|   |N (S)|  M  |  ,  |  .  |  /  |RSHFT|
            //                   | NUM | SPC |BSPC |   | TAB | ENT | SYM |
            //                          (ESC) (LCMD)   (RALT)(RCTRL)
            
            bindings = <
  &kp DEL            &mt N1 Q    &mt N2 W    &mt N3 E     &mt N4 R  &mt N5 T           &mt N6 Y         &mt N7 U  &mt N8 I   &mt N9 O &mt N0 P  &kp MINUS
  &kp RA(RS(RCTRL))  &kp A       &mt UP S    &kp D        &kp F     &mt LG(C) G        &mt LG(F) H      &kp J     &kp K      &kp L    &kp SEMI  &mt RA(NUMBER_6) SQT
  &kp LSHIFT         &mt LEFT Z  &mt DOWN X  &mt RIGHT C  &kp V     &mt LG(V) B        &mt RA(RC(S)) N  &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp RSHIFT
                                            &mo 2  &mt ESC SPACE  &mt LCMD BSPC        &mt RALT TAB  &mt RCTRL ENTER  &mo 3
            >;
        };

win_layer {
            label = "WIN";

            // -----------------------------------------------------------------------------------------
            // | DEL |Q (1)|W (2)|E (3)|R (4)|T (5)|   |Y (6)|U (7)|I (8)|O (9)|P (0)|  -  |
            // | SUP |  A  |S(UP)|  D  |  F  |G (C)|   |H (F)|  J  |  K  |  L  |  ;  |  '  |
            // |LSHFT|Z(LT)|X(DN)|C(RT)|  V  |B (V)|   |  S  |  M  |  ,  |  .  |  /  |RSHFT|
            //                   | NUM | SPC |BSPC |   | TAB | ENT | SYM |
            //                         (ESC) (LCTRL)   (RALT)(RCTRL)
            
            bindings = <
  &kp DEL            &mt N1 Q    &mt N2 W    &mt N3 E      &mt N4 R &mt N5 T         &mt N6 Y     &mt N7 U  &mt N8 I   &mt N9 O  &mt N0 P  &kp MINUS
  &kp RA(RS(RCTRL))  &kp A       &mt UP S    &kp D         &kp F    &mt LC(C) G      &mt LC(F) H  &kp J     &kp K      &kp L     &kp SEMI  &kp SQT
  &kp LSHIFT         &mt LEFT Z  &mt DOWN X  &mt RIGHT C   &kp V    &mt LC(V) B      &kp N        &kp M     &kp COMMA  &kp DOT   &kp FSLH  &kp RSHIFT
                                           &mo 2  &mt ESC SPACE  &mt LCTRL BSPC      &mt RALT TAB &mt RCTRL ENTER  &mo 3
            >;
        };

        num_layer {
            label = "NUM";

            // -----------------------------------------------------------------------------------------
            // |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  -  |
            // |LALT |     | UP  |     |     |     |   |  =  |  4  |  5  |  6  |  *  |  +  |
            // |LSHFT|LEFT |DOWN |RIGHT|     |     |   |     |  1  |  2  |  3  |  /  |RSHFT|
            //                   | NUM | SPC |BPSC |   | TAB | ENT |  0  |

            bindings = <
&kp EQUAL  &kp N1    &kp N2    &kp N3     &kp N4  &kp N5      &kp N6     &kp N7  &kp N8  &kp N9  &kp N0     &kp MINUS
&kp LALT   &none     &kp UP    &none      &none   &none       &kp EQUAL  &kp N4  &kp N5  &kp N6  &kp STAR   &kp PLUS
&kp LSHFT  &kp LEFT  &kp DOWN  &kp RIGHT  &none   &none       &none      &kp N1  &kp N2  &kp N3  &kp SLASH  &kp RSHFT
                             &tog 2  &kp SPACE  &kp BSPC      &kp TAB  &kp ENTER  &kp N0
            >;
        };

        media_layer {
            label = "MEDIA";

            // -----------------------------------------------------------------------------------------
            // |     |     |     |  (  |  )  |     |   |     |     |     |     |     |     |
            // |VOLUP|VMUTE|     |  [  |  ]  |     |   |     |     |     |     |     |     |
            // |VOLDN| P_P |     |  {  |  }  |     |   |     |     |     |     |     |     |
            //                   | MED | MED | MED |   | MED | MED | MED |

            bindings = <
&none         &none       &none  &kp LBRC  &kp RBRC  &none      &none  &none  &none  &none  &none  &none
&kp C_VOL_UP  &kp C_MUTE  &none  &kp LPAR  &kp RPAR  &none      &none  &none  &none  &none  &none  &none
&kp C_VOL_DN  &kp C_PP    &none  &kp LBKT  &kp RBKT  &none      &none  &none  &none  &none  &none  &none
                                    &tog 3  &tog 3  &tog 3      &tog 3  &tog 3  &tog 3
            >;
        };

        csgo_layer {
            label = "CSGO";

            // -----------------------------------------------------------------------------------------
            // | ESC |  1  |  2  |  3  |  4  |  5  |   |VOLUP| F1  | F2  |     |     | DEF |
            // | TAB |  Q  |  W  |  E  |  R  |  T  |   |VOLDN|     |     |     |     | DEF |
            // |LSHFT|  A  |  S  |  D  |  F  |  G  |   |VMUTE|     |     |     |     | DEF |
            //                   |LCTRL|SPACE| TAB |   |CSGO |CSGO |CSGO |

            bindings = <
&kp ESC     &kp N1  &kp N2  &kp N3  &kp N4  &kp N5      &kp C_VOL_UP  &kp F1  &kp F2  &none  &none  &tog 4
&kp TAB     &kp Q   &kp W   &kp E   &kp R   &kp T       &kp C_VOL_DN  &none  &none    &none  &none  &tog 4
&kp LSHIFT  &kp A   &kp S   &kp D   &kp F   &kp G       &kp C_MUTE    &none  &none    &none  &none  &tog 4
                    &kp LCTRL  &kp SPACE  &kp TAB       &tog 4  &tog 4  &tog 4
            >;
        };

        sttg_layer {
            label = "STTG";
            
            // -----------------------------------------------------------------------------------------
            // | DEF | BT1 | BT2 | BT3 | BT4 | BT5 |   |     |     |     |     |     |     |
            // | DEF | SET | SET | SET | SET | SET |   |     |SWTCH| BLE | USB |     |     |
            // | DEF |     |     |     |     |     |   |     |     |     |     |     |     |
            //                   |BTCLR|BTCLR|BTCLR|   | SET | SET | SET |
            
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &none  &none  &none  &none  &none  &none
&none  &tog 5        &tog 5        &tog 5        &tog 5        &tog 5            &none  &out OUT_TOG  &out OUT_BLE  &out OUT_USB  &none  &none
&none  &none         &none         &none         &none         &none             &none  &none  &none  &none  &none  &none
                              &bt BT_CLR    &bt BT_CLR    &bt BT_CLR             &tog 5  &tog 5  &tog 5
            >;
        };
    };
};
