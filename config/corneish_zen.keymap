
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


// Layers
#define BASE 0
#define WIN 1
#define NUM 2
#define MEDIA 3
#define CSGO 4
#define STTG 5
#define EXP 6
#define NUM 7
#define MEDIA 8

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
        //zmk,matrix_transform = &five_column_transform;
    };
};

// Combination Behaviors
// _____________________________________   _____________________________________
// |  0  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  10 |  11 |
// |  12 |  13 |  14 |  15 |  16 |  17 |   |  18 |  19 |  20 |  21 |  22 |  23 |
// |  24 |  25 |  26 |  27 |  28 |  29 |   |  30 |  31 |  32 |  33 |  34 |  35 |
//                   |  36 |  37 |  38 |   |  39 |  40 |  41 |

/ {
    combos {
        compatible = "zmk,combos";
                     
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <16 19>;
            bindings = <&kp CAPSLOCK>;
                     };
                     
        combo_COPYPASTEbase {
            timeout-ms = <50>;
            key-positions = <15 16>;
            layers = <0 6>;
            bindings = <&mt LG(V) LG(C)>;
                     };  
                     
        combo_COPYPASTEwin {
            timeout-ms = <50>;
            key-positions = <15 16>;
            layers = <1>;
            bindings = <&mt LC(V) LC(C)>;
                     };
                     
        combo_super {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp RA(RS(RCTRL))>;
                     };
                     
        combo_ToggleNUMright {
            timeout-ms = <50>;
            key-positions = <21 34>;
            layers = <0 1>;
            bindings = <&mo 2>;
                     };
                       
        combo_WIN {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&tog 1>;
                       };
                      
        combo_CSGO {
            timeout-ms = <50>;
            key-positions = <14 27>;
            bindings = <&tog 4>;
                       };
                       
        combo_STTG {
            timeout-ms = <50>;
            key-positions = <6 7 8>;
            bindings = <&tog 5>;
                       };
                       
                       
//Experimental 5-col set up                       
        combo_DEL {
            timeout-ms = <50>;
            key-positions = <13 2>;
            layers = <6>;
            bindings = <&kp DEL>;
                       };
                      
        combo_MEGASEC {
            timeout-ms = <50>;
            key-positions = <13 14>;
            layers = <6>;
            bindings = <&mt RA(RS(RA(RCMD))) RA(NUMBER_6)>;
                       };
                       
        combo_ToggleMED2left {
            timeout-ms = <50>;
            key-positions = <14 25>;
            layers = <6>;
            bindings = <&mo 8>;
                     };
                       
        combo_EQUALMINUS {
            timeout-ms = <50>;
            key-positions = <9 22>;
            layers = <6>;
            bindings = <&mt EQUAL MINUS>;
                       };
                     
        //Placeholder for key-positions = <21 34>;                     
                     
        combo_ToggleNUM2right {
            timeout-ms = <50>;
            key-positions = <21 34>;
            layers = <6>;
            bindings = <&mo 7>;
                     };
                       
        combo_EXP {
            timeout-ms = <50>;
            key-positions = <36 41>;
            bindings = <&tog 6>;
                       };
           };
    };

// Hold-tap behaviors
&mt {
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    quick-tap-ms = <200>;
};

//Keymap
/{
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";

            // _____________________________________   _____________________________________
            // | DEL |Q (1)|W (2)|E (3)|R (4)|T (5)|   |Y (6)|U (7)|I (8)|O (9)|P (0)|- (=)|
            // |MEGAÂ§|  A  |S(UP)|  D  |  F  |  G  |   |H (F)|  J  |  K  |  L  |  ;  |' (`)|
            // |LSHFT|Z(LT)|X(DN)|C(RT)|  V  |  B  |   |N (S)|  M  |  ,  |  .  |  /  |RSHFT|
            //                   | NUM | SPC |BSPC |   | TAB | ENT | SYM |
            //                          (ESC) (LCMD)   (RALT)(RCTRL)
            
            bindings = <
  &kp DEL                            &mt N1 Q      &mt N2 W    &mt N3 E     &mt N4 R  &mt N5 T       &mt N6 Y         &mt N7 U  &mt N8 I   &mt N9 O &mt N0 P  &mt EQUAL MINUS
  &mt RA(RS(RA(RCMD))) RA(NUMBER_6)  &kp A         &mt UP S    &kp D        &kp F     &kp G          &mt LG(F) H      &kp J     &kp K      &kp L    &kp SEMI  &mt GRAVE SQT
  &kp LSHIFT                         &mt LEFT Z    &mt DOWN X  &mt RIGHT C  &kp V     &kp B          &mt RA(RC(S)) N  &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp RSHIFT
                                                           &mo 2  &mt ESC SPACE  &mt LCMD BSPC       &mt RALT TAB  &mt RCTRL ENTER  &mo 3
            >;
        };

win_layer {
            label = "WIN";

            // _____________________________________   _____________________________________
            // | DEL |Q (1)|W (2)|E (3)|R (4)|T (5)|   |Y (6)|U (7)|I (8)|O (9)|P (0)|- (=)|
            // |     |  A  |S(UP)|  D  |  F  |  G  |   |H (F)|  J  |  K  |  L  |  ;  | '(`)|
            // |LSHFT|Z(LT)|X(DN)|C(RT)|  V  |  B  |   |N (S)|  M  |  ,  |  .  |  /  |RSHFT|
            //                   | NUM | SPC |BSPC |   | TAB | ENT | SYM |
            //                         (ESC) (LCTRL)   (RALT)(RCTRL)
            
            bindings = <
  &kp DEL     &mt N1 Q    &mt N2 W    &mt N3 E      &mt N4 R  &mt N5 T         &mt N6 Y     &mt N7 U  &mt N8 I   &mt N9 O  &mt N0 P  &mt EQUAL MINUS
  &none       &kp A       &mt UP S    &kp D         &kp F     &kp  G           &mt LC(F) H  &kp J     &kp K      &kp L     &kp SEMI  &mt GRAVE SQT
  &kp LSHIFT  &mt LEFT Z  &mt DOWN X  &mt RIGHT C   &kp V     &kp  B           &kp N        &kp M     &kp COMMA  &kp DOT   &kp FSLH  &kp RSHIFT
                                  &mo 2  &mt ESC SPACE  &mt LCTRL BSPC         &mt RALT TAB &mt RCTRL ENTER  &mo 3
            >;
        };

        num_layer {
            label = "NUM";

            // _____________________________________   _____________________________________
            // |LCTRL|     |     |  {  |  }  |     |   |     |  7  |  8  |  9  |  0  |  -  |
            // |LALT |     |     |  (  |  )  |     |   |     |  4  |  5  |  6  |  *  |  +  |
            // |LSHFT|     |     |  [  |  ]  |     |   |     |  1  |  2  |  3  |  /  |  =  |
            //                   | NUM | SPC |BPSC |   | TAB | ENT |  0  |

            bindings = <
&kp LCTRL   &none  &none  &kp LBRC   &kp RBRC  &none        &kp N6  &kp N7  &kp N8  &kp N9  &kp N0     &kp MINUS
&kp LALT    &none  &none  &kp LPAR   &kp RPAR  &none        &none   &kp N4  &kp N5  &kp N6  &kp STAR   &kp PLUS
&kp LSHIFT  &none  &none  &kp LBKT   &kp RBKT  &none        &none   &kp N1  &kp N2  &kp N3  &kp SLASH  &kp EQUAL
                         &tog 2  &kp SPACE  &kp BSPC        &kp TAB  &kp ENTER  &kp N0
            >;
        };

        media_layer {
            label = "MEDIA";

            // _____________________________________   _____________________________________
            // |     |     |     |     |     |     |   |     |     |     |     |     |     |
            // |     |     |     |     |VOLUP|VMUTE|   |briUP|     |     |     |     |     |
            // |     |     |     |     |VOLDN| P_P |   |briDN|     |     |     |     |     |
            //                   | MED | MED | MED |   | MED | MED | MED |

            bindings = <
&none  &none  &none  &none  &none         &none           &none                 &none  &none  &none  &none  &none
&none  &none  &none  &none  &kp C_VOL_UP  &kp C_MUTE      &kp C_BRIGHTNESS_INC  &none  &none  &none  &none  &none
&none  &none  &none  &none  &kp C_VOL_DN  &kp C_PP        &kp C_BRIGHTNESS_DEC  &none  &none  &none  &none  &none
                                        &tog 3  &tog 3  &tog 3      &tog 3  &tog 3  &tog 3
            >;
        };

        csgo_layer {
            label = "CSGO";

            // _____________________________________   _____________________________________
            // |     |  5  |  1  |  2  |  3  |  4  |   |VOLUP| F1  | ALL |     | ESC |     |
            // |     | TAB |  Q  |  W  |  E  |  R  |   |VOLDN| F2  |TEAMS|     |     |     |
            // |     |LCTRL|  A  |  S  |  D  |  G  |   |VMUTE|     |     |     |     |     |
            //                   |LSHFT|SPACE|F (B)|   |     |     |     |

            bindings = <
&kp ESC     &kp N5     &kp N1  &kp N2  &kp N3  &kp N4        &kp C_VOL_UP  &kp F1  &kp Y  &none  &none  &tog 4
&kp TAB     &kp F      &kp Q   &kp W   &kp E   &kp R         &kp C_VOL_DN  &kp F2  &kp U   &none  &none  &tog 4
&kp LCTRL   &kp LSHFT  &kp A   &kp S   &kp D   &mt F G       &kp C_MUTE    &none   &none   &none  &none  &tog 4
                            &kp B  &kp SPACE  &kp SPACE      &none  &none  &none
            >;
        };

        sttg_layer {
            label = "STTG";
            
            // _____________________________________   _____________________________________
            // | DEF | BT1 | BT2 | BT3 | BT4 | BT5 |   |     |     |     |     |     |     |
            // | DEF | SET | SET | SET | SET | SET |   |     |SWTCH| BLE | USB |     |     |
            // | DEF |     |     |     |     |     |   |     |     |     |     |     |     |
            //                   |BTCLR|BTCLR|BTCLR|   | SET | SET | SET |
            
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &none  &none  &none  &none  &none  &none
&none  &tog 5        &tog 5        &tog 5        &tog 5        &tog 5            &none  &out OUT_TOG  &out OUT_BLE  &out OUT_USB  &none  &none
&none  &none         &none         &none         &none         &none             &none  &none  &none  &none  &none  &none
                              &bt BT_CLR    &bt BT_CLR    &bt BT_CLR             &tog 5  &tog 5  &tog 5                              
            >;
        };
        
exp_layer {
            label = "EXP";

            // _____________________________________   _____________________________________
            // |     |Q (1)|W (2)|E (3)|R (4)|T (5)|   |Y (6)|U (7)|I (8)|O (9)|P (0)|     |
            // |     |  A  |  S  |  D  |  F  |  G  |   |H (F)|  J  |  K  |  L  |; (')|     |
            // |     |Z SFT|  X  |  C  |  V  |  B  |   |N (S)|  M  |  ,  |  .  |/ SFT|     |
            //                   | NUM2| SPC |BSPC |   | TAB | ENT | SYM2|
            //                          (ESC) (LCMD)   (RALT)(RCTRL)
            
            bindings = <
  &none     &mt N1 Q     &mt N2 W    &mt N3 E    &mt N4 R     &mt N5 T       &mt N6 Y         &mt N7 U  &mt N8 I   &mt N9 O &mt N0 P           &none
  &none     &kp A        &kp S       &mt UP D    &kp F        &kp G          &mt LG(F) H      &kp J     &kp K      &kp L    &mt SEMI SQT       &none
  &none     &mt LSHFT Z  &mt LEFT X  &mt DOWN C  &mt RIGHT V  &kp B          &mt RA(RC(S)) N  &kp M     &kp COMMA  &kp DOT  &mt RSHFT FSLH     &none
                                   &mo 7  &mt ESC SPACE  &mt LCMD BSPC       &mt RALT TAB  &mt RCTRL ENTER  &mo 8
            >;
        };
num2_layer {
            label = "NUM2";

            // _____________________________________   _____________________________________
            // |     |LCTRL|     |  {  |  }  |  +  |   |  -  |  7  |  8  |  9  |  0  |     |
            // |     |LALT |     |  (  |  )  |  *  |   |  /  |  4  |  5  |  6  |     |     |
            // |     |LSHFT|     |  [  |  ]  |  =  |   |     |  1  |  2  |  3  |     |     |
            //                   | NUM2| SPC |BPSC |   | TAB | ENT |  0  |

            bindings = <
&none    &kp LCTRL   &none  &kp LBRC   &kp RBRC  &kp PLUS         &kp MINUS  &kp N7  &kp N8  &kp N9  &kp N0        &none
&none    &kp LALT    &none  &kp LPAR   &kp RPAR  &kp STAR         &kp SLASH  &kp N4  &kp N5  &kp N6  &kp STAR      &none
&none    &kp LSHIFT  &none  &kp LBKT   &kp RBKT  &kp EQUAL        &none      &kp N1  &kp N2  &kp N3  &kp SLASH     &none
                         &tog 7  &kp SPACE  &kp BSPC        &kp TAB  &kp ENTER  &kp N0
            >;
        };

        media2_layer {
            label = "MEDIA2";

            // _____________________________________   _____________________________________
            // |     |     |     |     |     |     |   |VOLUP|briUP|     |  O  |     |     |
            // |     |     |     |  UP |     | MEGA|   |VOLDN|briDN|     |     |     |     |
            // |     |SUPER| LEFT| DOWN|RIGHT| MEH |   |VMUTE|     |     |     |     |     |
            //                   | MED | MED | MED |   | P_P |     |     |

            bindings = <
&none  &none              &none     &none     &none      &none                      &kp C_VOL_UP  &kp C_BRIGHTNESS_INC  &none  &kp O  &none  &none
&none  &none              &none     &kp UP    &none      &kp RA(RS(RA(RCMD))        &kp C_VOL_DN  &kp C_BRIGHTNESS_DEC  &none  &none  &none  &none
&none  &kp RA(RS(RCTRL))  &kp LEFT  &kp DOWN  &kp RIGHT  &kp RA(RCTRL)              &kp C_MUTE    &none  &none  &none  &none  &none
                                                      &tog 8  &tog 8  &tog 8        &kp C_PP  &tog 8  &tog 8
            >;
        };
    };
};
